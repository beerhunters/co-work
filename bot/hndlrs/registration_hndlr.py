import os
import re
from datetime import datetime

import pytz
from aiogram import Router, Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

from models.models import add_user, check_and_add_user
from utils.logger import setup_logger

logger = setup_logger(__name__)

load_dotenv()

router = Router()
MOSCOW_TZ = pytz.timezone("Europe/Moscow")
ADMIN_TELEGRAM_ID = os.getenv("ADMIN_TELEGRAM_ID")


def create_register_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="start_registration"
                )
            ]
        ]
    )
    return keyboard


class Registration(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""

    full_name = State()
    phone = State()
    email = State()


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    if not message.from_user:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    result = check_and_add_user(
        telegram_id=message.from_user.id, username=message.from_user.username
    )

    if not result:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    user, is_complete = result

    if is_complete:
        full_name = user.full_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    else:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=create_register_keyboard()
        )


@router.callback_query(F.data == "start_registration")
async def start_registration(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
    )
    await callback_query.answer()
    await state.set_state(Registration.full_name)


@router.message(Registration.full_name)
async def process_full_name(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û."""
    full_name = message.text.strip()
    if not full_name:
        await message.answer("–§–ò–û –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(full_name=full_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+79991112233 –∏–ª–∏ 89991112233):")
    await state.set_state(Registration.phone)


@router.message(Registration.phone)
async def process_phone(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    phone = message.text.strip()
    if not re.match(r"^(?:\+?\d{11})$", phone):
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ +79991112233 –∏–ª–∏ 89991112233. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return
    await state.update_data(phone=phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email (–Ω–∞–ø—Ä–∏–º–µ—Ä, user@domain.com):")
    await state.set_state(Registration.email)


@router.message(Registration.email)
async def process_email(message: Message, state: FSMContext, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    email = message.text.strip()
    if not re.match(r"^[\w\.-]+@[\w\.-]+\.\w+$", email):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    data = await state.get_data()
    full_name = data["full_name"]
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –§–ò–û –Ω–∞ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ
    name_parts = full_name.split()
    last_name = name_parts[0] if len(name_parts) > 0 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    first_name = name_parts[1] if len(name_parts) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    middle_name = name_parts[2] if len(name_parts) > 2 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    try:
        add_user(
            telegram_id=message.from_user.id,
            full_name=full_name,
            phone=data["phone"],
            email=email,
            username=message.from_user.username,
            reg_date=datetime.now(MOSCOW_TZ),
        )
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if ADMIN_TELEGRAM_ID:
            try:
                notification = (
                    "<b>üë§ –ù–æ–≤—ã–π —Ä–µ–∑–∏–¥–µ–Ω—Ç ‚úÖ ‚úÖ</b>\n"
                    "<b>üìã –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n"
                    f"–§–∞–º–∏–ª–∏—è: <code>{last_name}</code>\n"
                    f"–ò–º—è: <code>{first_name}</code>\n"
                    f"–û—Ç—á–µ—Å—Ç–≤–æ: <code>{middle_name}</code>\n"
                    f"<b>üéüÔ∏è TG: </b>@{message.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                    f"<b>‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: </b><code>{data['phone']}</code>\n"
                    f"<b>üì® Email: </b><code>{email}</code>"
                )
                await bot.send_message(
                    chat_id=ADMIN_TELEGRAM_ID, text=notification, parse_mode="HTML"
                )
                logger.info(
                    f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {ADMIN_TELEGRAM_ID}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {str(e)}")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è {message.from_user.id}: {str(e)}")
    finally:
        await state.clear()


def register_handlers(dp: Dispatcher) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
    dp.include_router(router)
