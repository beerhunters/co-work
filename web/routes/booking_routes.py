from flask import Flask, request, render_template, redirect, url_for, flash
from flask_login import login_required
from datetime import datetime, date
from typing import Any, Optional

from models.models import Booking, User, Tariff, Promocode
from web.routes.utils import (
    get_unread_notifications_count,
    get_recent_notifications,
    send_telegram_message_sync,
)
from web.app import db
import pytz

from utils.logger import get_logger

# –¢–∏—Ö–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –º–æ–¥—É–ª—è
logger = get_logger(__name__)

MOSCOW_TZ = pytz.timezone("Europe/Moscow")


def format_booking_confirmation_notification(
    user: User, booking: Booking, tariff: Tariff, promocode: Optional[Promocode] = None
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        booking: –û–±—ä–µ–∫—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
        tariff: –û–±—ä–µ–∫—Ç —Ç–∞—Ä–∏—Ñ–∞.
        promocode: –û–±—ä–µ–∫—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω—ë–Ω, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é None).

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ HTML-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.
    """
    tariff_emojis = {
        "meeting": "ü§ù",
        "workspace": "üíº",
        "event": "üéâ",
        "office": "üè¢",
        "coworking": "üíª",
    }

    purpose = tariff.purpose.lower()
    tariff_emoji = tariff_emojis.get(purpose, "üìã")
    visit_date = booking.visit_date
    visit_time = booking.visit_time

    if visit_time:
        datetime_str = (
            f"{visit_date.strftime('%d.%m.%Y')} –≤ {visit_time.strftime('%H:%M')}"
        )
    else:
        datetime_str = f"{visit_date.strftime('%d.%m.%Y')} (–≤–µ—Å—å –¥–µ–Ω—å)"

    discount_info = ""
    if promocode and booking.promocode_id:
        discount_info = f"\nüí∞ <b>–°–∫–∏–¥–∫–∞:</b> {promocode.discount}% (–ø—Ä–æ–º–æ–∫–æ–¥: <code>{promocode.name}</code>)"

    duration_info = ""
    if booking.duration:
        duration_info = f"\n‚è± <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {booking.duration} —á–∞—Å(–æ–≤)"

    message = f"""‚úÖ <b>–í–∞—à–∞ –±—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b> {tariff_emoji}

üìã <b>–î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏:</b>
‚îú <b>–¢–∞—Ä–∏—Ñ:</b> {tariff.name}
‚îú <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {datetime_str}{duration_info}
‚îî <b>–°—É–º–º–∞:</b> {booking.amount:.2f} ‚ÇΩ{discount_info}

‚è∞ <i>–í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {datetime.now(MOSCOW_TZ).strftime('%d.%m.%Y %H:%M:%S')}</i>"""

    logger.debug(
        f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏ {booking.id}:\n{message}"
    )
    return message.strip()


def init_booking_routes(app: Flask) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏."""

    @app.route("/bookings")
    @login_required
    def bookings() -> Any:
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–∏—Å–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞—Ç–µ –≤–∏–∑–∏—Ç–∞.

        Returns:
            –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞ bookings.html —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.
        """
        user_query = request.args.get("user_query", "").strip()
        date_query = request.args.get("date_query", "").strip()

        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        query = (
            db.session.query(Booking)
            .join(User)
            .join(Tariff)
            .order_by(Booking.visit_date.desc())
        )

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π —á–∞—Å—Ç–∏—á–Ω—ã–π –ø–æ–∏—Å–∫)
        if user_query:
            query = query.filter(User.full_name.ilike(f"%{user_query}%"))
            logger.debug(f"–ü—Ä–∏–º–µ–Ω—ë–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_query}")

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ –≤–∏–∑–∏—Ç–∞ (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
        if date_query:
            try:
                query_date = datetime.strptime(date_query, "%Y-%m-%d").date()
                query = query.filter(Booking.visit_date == query_date)
                logger.debug(f"–ü—Ä–∏–º–µ–Ω—ë–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –≤–∏–∑–∏—Ç–∞: {date_query}")
            except ValueError:
                flash("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD")
                logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –≤ –∑–∞–ø—Ä–æ—Å–µ: {date_query}")

        bookings = query.all()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(bookings)} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")

        unread_notifications = get_unread_notifications_count()
        recent_notifications = get_recent_notifications()
        return render_template(
            "bookings.html",
            bookings=bookings,
            unread_notifications=unread_notifications,
            recent_notifications=recent_notifications,
        )

    @app.route("/booking/<int:booking_id>")
    @login_required
    def booking_detail(booking_id: int) -> Any:
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.

        Args:
            booking_id: ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.

        Returns:
            –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞ booking_detail.html –∏–ª–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç.
        """
        booking = db.session.get(Booking, booking_id)
        if not booking:
            flash("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            logger.warning(f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {booking_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return redirect(url_for("bookings"))

        logger.debug(f"Promocode for booking {booking_id}: {booking.promocode}")
        unread_notifications = get_unread_notifications_count()
        recent_notifications = get_recent_notifications()
        return render_template(
            "booking_detail.html",
            booking=booking,
            user=booking.user,
            tariff=booking.tariff,
            promocode=booking.promocode,
            edit=False,
            unread_notifications=unread_notifications,
            recent_notifications=recent_notifications,
        )

    @app.route("/booking/<int:booking_id>/edit", methods=["GET", "POST"])
    @login_required
    def edit_booking(booking_id: int) -> Any:
        """
        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.

        Args:
            booking_id: ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.

        Returns:
            –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞ booking_detail.html –∏–ª–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç.
        """
        booking = db.session.get(Booking, booking_id)
        if not booking:
            flash("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            logger.warning(f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {booking_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return redirect(url_for("bookings"))

        logger.debug(f"Promocode for booking {booking_id}: {booking.promocode}")

        if request.method == "POST":
            try:
                visit_date = request.form.get("visit_date")
                booking.visit_date = datetime.strptime(visit_date, "%Y-%m-%d").date()
                if booking.tariff.purpose == "–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è":
                    visit_time = request.form.get("visit_time")
                    booking.visit_time = datetime.strptime(visit_time, "%H:%M").time()
                    booking.duration = int(request.form.get("duration"))
                booking.amount = float(request.form.get("amount"))
                booking.paid = request.form.get("paid") == "on"
                db.session.commit()
                flash("–î–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                logger.info(f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {booking_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                return redirect(url_for("booking_detail", booking_id=booking_id))
            except Exception as e:
                db.session.rollback()
                flash("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {booking_id}: {str(e)}")

        unread_notifications = get_unread_notifications_count()
        recent_notifications = get_recent_notifications()
        return render_template(
            "booking_detail.html",
            booking=booking,
            user=booking.user,
            tariff=booking.tariff,
            promocode=booking.promocode,
            edit=True,
            unread_notifications=unread_notifications,
            recent_notifications=recent_notifications,
        )

    @app.route("/booking/<int:booking_id>/delete", methods=["POST"])
    @login_required
    def delete_booking(booking_id: int) -> Any:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.

        Args:
            booking_id: ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.

        Returns:
            –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.
        """
        booking = db.session.get(Booking, booking_id)
        if not booking:
            flash("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            logger.warning(f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {booking_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return redirect(url_for("bookings"))
        try:
            db.session.delete(booking)
            db.session.commit()
            flash("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
            logger.info(f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {booking_id} —É–¥–∞–ª–µ–Ω–æ")
        except Exception as e:
            db.session.rollback()
            flash("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {booking_id}: {str(e)}")
        return redirect(url_for("bookings"))

    @app.route("/booking/<int:booking_id>/confirm", methods=["POST"])
    @login_required
    def confirm_booking(booking_id: int) -> Any:
        """
        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è '–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π'.

        Args:
            booking_id: ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.

        Returns:
            –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
        """
        booking = db.session.get(Booking, booking_id)
        if not booking:
            flash("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            logger.warning(f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {booking_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return redirect(url_for("bookings"))

        if booking.confirmed:
            flash("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
            logger.info(f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {booking_id} —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
            return redirect(url_for("booking_detail", booking_id=booking_id))

        try:
            booking.confirmed = True
            user = db.session.get(User, booking.user_id)
            tariff = db.session.get(Tariff, booking.tariff_id)
            promocode = (
                db.session.get(Promocode, booking.promocode_id)
                if booking.promocode_id
                else None
            )

            if not user or not tariff:
                flash("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                logger.error(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {booking.user_id} –∏–ª–∏ —Ç–∞—Ä–∏—Ñ {booking.tariff_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –±—Ä–æ–Ω–∏ {booking_id}"
                )
                return redirect(url_for("booking_detail", booking_id=booking_id))

            message = format_booking_confirmation_notification(
                user, booking, tariff, promocode
            )
            success = send_telegram_message_sync(user.telegram_id, message)
            if success:
                logger.info(
                    f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏ {booking_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}"
                )
            else:
                logger.error(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id} –¥–ª—è –±—Ä–æ–Ω–∏ {booking_id}"
                )

            db.session.commit()
            flash("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
            logger.info(f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {booking_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
        except Exception as e:
            db.session.rollback()
            flash("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {booking_id}: {str(e)}")
        return redirect(url_for("booking_detail", booking_id=booking_id))
