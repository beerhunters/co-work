from flask import Flask, request, render_template, redirect, url_for, flash
from flask_login import login_required
from datetime import datetime
from typing import Any, Optional
import pytz

from models.models import Ticket, TicketStatus, User
from web.routes.utils import (
    get_unread_notifications_count,
    get_recent_notifications,
    send_telegram_message_sync,
)
from web.app import db
from utils.logger import get_logger

# –¢–∏—Ö–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –º–æ–¥—É–ª—è
logger = get_logger(__name__)

# –ú–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
MOSCOW_TZ = pytz.timezone("Europe/Moscow")


def format_ticket_status_notification(
    user: User, ticket: Ticket, status: str, comment: Optional[str] = None
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        ticket: –û–±—ä–µ–∫—Ç –∑–∞—è–≤–∫–∏.
        status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–û—Ç–∫—Ä—ã—Ç–∞", "–í —Ä–∞–±–æ—Ç–µ", "–ó–∞–∫—Ä—ã—Ç–∞").
        comment: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Å—Ç–∞—Ç—É—Å–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é None).

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ HTML-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.
    """
    status_emojis = {
        "–û—Ç–∫—Ä—ã—Ç–∞": "üÜï",
        "–í —Ä–∞–±–æ—Ç–µ": "‚öôÔ∏è",
        "–ó–∞–∫—Ä—ã—Ç–∞": "‚úÖ",
    }

    status_emoji = status_emojis.get(status, "üìã")
    comment_info = f"\n‚îî <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment}" if comment else ""

    message = f"""{status_emoji} <b>–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{ticket.id} –∏–∑–º–µ–Ω—ë–Ω!</b>

üìã <b>–î–µ—Ç–∞–ª–∏:</b>
‚îú <b>ID:</b> {ticket.id}
‚îú <b>–°—Ç–∞—Ç—É—Å:</b> {status}{comment_info}
‚îî <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {ticket.description}

‚è∞ <i>–í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: {datetime.now(MOSCOW_TZ).strftime('%d.%m.%Y %H:%M:%S')}</i>"""

    logger.debug(
        f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ #{ticket.id}:\n{message}"
    )
    return message.strip()


def init_ticket_routes(app: Flask) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏."""

    @app.route("/tickets")
    @login_required
    def tickets() -> Any:
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É.

        Returns:
            –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞ tickets.html —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–æ–∫.
        """
        page = request.args.get("page", 1, type=int)
        status = request.args.get("status", "").strip()
        per_page = 10

        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫
        query = db.session.query(Ticket).order_by(Ticket.created_at.desc())

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if status:
            try:
                status_enum = TicketStatus(status)
                query = query.filter(Ticket.status == status_enum)
                logger.debug(f"–ü—Ä–∏–º–µ–Ω—ë–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É: {status}")
            except ValueError:
                flash("–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å", "error")
                logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤ –∑–∞–ø—Ä–æ—Å–µ: {status}")

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        pagination = query.paginate(page=page, per_page=per_page, error_out=False)
        tickets = pagination.items
        logger.info(
            f"–ù–∞–π–¥–µ–Ω–æ {len(tickets)} –∑–∞—è–≤–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page} –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"
        )

        unread_notifications = get_unread_notifications_count()
        recent_notifications = get_recent_notifications()
        return render_template(
            "tickets.html",
            tickets=tickets,
            pagination=pagination,
            unread_notifications=unread_notifications,
            recent_notifications=recent_notifications,
        )

    @app.route("/ticket/<int:ticket_id>")
    @login_required
    def ticket_detail(ticket_id: int) -> Any:
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ.

        Args:
            ticket_id: ID –∑–∞—è–≤–∫–∏.

        Returns:
            –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞ ticket_detail.html –∏–ª–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç.
        """
        ticket = db.session.get(Ticket, ticket_id)
        if not ticket:
            flash("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "error")
            return redirect(url_for("tickets"))

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        created_at_msk = (
            ticket.created_at.astimezone(MOSCOW_TZ) if ticket.created_at else None
        )
        updated_at_msk = (
            ticket.updated_at.astimezone(MOSCOW_TZ) if ticket.updated_at else None
        )

        unread_notifications = get_unread_notifications_count()
        recent_notifications = get_recent_notifications()
        return render_template(
            "ticket_detail.html",
            ticket=ticket,
            user=ticket.user,
            created_at_msk=created_at_msk,
            updated_at_msk=updated_at_msk,
            unread_notifications=unread_notifications,
            recent_notifications=recent_notifications,
        )

    @app.route("/ticket/<int:ticket_id>/edit", methods=["GET", "POST"])
    @login_required
    def edit_ticket(ticket_id: int) -> Any:
        """
        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏.

        Args:
            ticket_id: ID –∑–∞—è–≤–∫–∏.

        Returns:
            –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞ ticket_detail.html –∏–ª–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç.
        """
        ticket = db.session.get(Ticket, ticket_id)
        if not ticket:
            flash("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "error")
            return redirect(url_for("tickets"))

        if ticket.status == TicketStatus.CLOSED:
            flash("–ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞", "warning")
            return redirect(url_for("ticket_detail", ticket_id=ticket_id))

        if request.method == "POST":
            try:
                status = request.form.get("status")
                comment = request.form.get("comment")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞–∑–∞–¥ –Ω–∞ —Å—Ç–∞—Ç—É—Å "–û—Ç–∫—Ä—ã—Ç–∞"
                if ticket.status != TicketStatus.OPEN and status == "–û—Ç–∫—Ä—ã—Ç–∞":
                    flash("–ù–µ–ª—å–∑—è –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞—Ç—É—Å '–û—Ç–∫—Ä—ã—Ç–∞' –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è", "error")
                    return render_template(
                        "ticket_detail.html",
                        ticket=ticket,
                        user=ticket.user,
                        created_at_msk=(
                            ticket.created_at.astimezone(MOSCOW_TZ)
                            if ticket.created_at
                            else None
                        ),
                        updated_at_msk=(
                            ticket.updated_at.astimezone(MOSCOW_TZ)
                            if ticket.updated_at
                            else None
                        ),
                        unread_notifications=get_unread_notifications_count(),
                        recent_notifications=get_recent_notifications(),
                    )

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "–ó–∞–∫—Ä—ã—Ç–∞"
                if status == "–ó–∞–∫—Ä—ã—Ç–∞" and not comment:
                    flash("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞—è–≤–∫–∏", "error")
                    return render_template(
                        "ticket_detail.html",
                        ticket=ticket,
                        user=ticket.user,
                        created_at_msk=(
                            ticket.created_at.astimezone(MOSCOW_TZ)
                            if ticket.created_at
                            else None
                        ),
                        updated_at_msk=(
                            ticket.updated_at.astimezone(MOSCOW_TZ)
                            if ticket.updated_at
                            else None
                        ),
                        unread_notifications=get_unread_notifications_count(),
                        recent_notifications=get_recent_notifications(),
                    )

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
                ticket.status = TicketStatus(status)
                ticket.comment = comment
                ticket.updated_at = datetime.now(MOSCOW_TZ)
                db.session.commit()

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                user = db.session.get(User, ticket.user_id)
                message = format_ticket_status_notification(
                    user, ticket, status, comment
                )
                success = send_telegram_message_sync(user.telegram_id, message)
                if success:
                    logger.info(
                        f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ #{ticket.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}"
                    )
                else:
                    logger.error(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id} –¥–ª—è –∑–∞—è–≤–∫–∏ #{ticket.id}"
                    )
                    flash("–ó–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", "warning")
                flash("–î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", "success")
                logger.info(
                    f"–ó–∞—è–≤–∫–∞ #{ticket.id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞, updated_at: {ticket.updated_at}"
                )
                return redirect(url_for("ticket_detail", ticket_id=ticket_id))
            except Exception as e:
                db.session.rollback()
                flash("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", "error")
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #{ticket.id}: {str(e)}")
                return render_template(
                    "ticket_detail.html",
                    ticket=ticket,
                    user=ticket.user,
                    created_at_msk=(
                        ticket.created_at.astimezone(MOSCOW_TZ)
                        if ticket.created_at
                        else None
                    ),
                    updated_at_msk=(
                        ticket.updated_at.astimezone(MOSCOW_TZ)
                        if ticket.updated_at
                        else None
                    ),
                    unread_notifications=get_unread_notifications_count(),
                    recent_notifications=get_recent_notifications(),
                )

        unread_notifications = get_unread_notifications_count()
        recent_notifications = get_recent_notifications()
        return render_template(
            "ticket_detail.html",
            ticket=ticket,
            user=ticket.user,
            created_at_msk=(
                ticket.created_at.astimezone(MOSCOW_TZ) if ticket.created_at else None
            ),
            updated_at_msk=(
                ticket.updated_at.astimezone(MOSCOW_TZ) if ticket.updated_at else None
            ),
            unread_notifications=unread_notifications,
            recent_notifications=recent_notifications,
        )

    @app.route("/ticket/<int:ticket_id>/delete", methods=["POST"])
    @login_required
    def delete_ticket(ticket_id: int) -> Any:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏.

        Args:
            ticket_id: ID –∑–∞—è–≤–∫–∏.

        Returns:
            –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫.
        """
        ticket = db.session.get(Ticket, ticket_id)
        if not ticket:
            flash("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "error")
            return redirect(url_for("tickets"))
        try:
            db.session.delete(ticket)
            db.session.commit()
            flash("–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞", "success")
            logger.info(f"–ó–∞—è–≤–∫–∞ #{ticket.id} —É–¥–∞–ª–µ–Ω–∞")
        except Exception as e:
            db.session.rollback()
            flash("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏", "error")
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #{ticket.id}: {str(e)}")
        return redirect(url_for("tickets"))
